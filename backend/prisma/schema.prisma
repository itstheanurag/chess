// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash")
  rating       Int      @default(1200)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  whiteGames  Game[]          @relation("WhitePlayer")
  blackGames  Game[]          @relation("BlackPlayer")
  moves       GameMove[]
  spectating  GameSpectator[]
  GameMessage GameMessage[]

  @@map("user")
}

model GameMessage {
  id      String   @id @default(uuid()) @db.Uuid
  gameId  String   @db.Uuid
  message String   @db.Text
  sentAt  DateTime @default(now())

  userId String? @db.Uuid

  game Game? @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_messages")
}

model Game {
  id            String          @id @default(uuid()) @db.Uuid
  whitePlayerId String?         @map("white_player_id") @db.Uuid
  blackPlayerId String?         @map("black_player_id") @db.Uuid
  status        String          @db.VarChar(20)
  result        String?         @db.VarChar(20)
  type          GameType        @default(PUBLIC)
  passcode      String?         @db.VarChar(20)
  isVisible     Boolean         @default(false)
  fen           String          @db.Text
  startedAt     DateTime?       @map("started_at")
  endedAt       DateTime?       @map("ended_at")
  createdAt     DateTime        @default(now()) @map("created_at")
  notes         String?
  name          String          @default("")
  whitePlayer   User?           @relation("WhitePlayer", fields: [whitePlayerId], references: [id], onDelete: SetNull)
  blackPlayer   User?           @relation("BlackPlayer", fields: [blackPlayerId], references: [id], onDelete: SetNull)
  moves         GameMove[]
  spectators    GameSpectator[]

  messages GameMessage[]

  @@map("game")
}

enum GameType {
  PUBLIC
  PRIVATE
}

model GameMove {
  id         String   @id @default(uuid()) @db.Uuid
  gameId     String   @map("game_id") @db.Uuid
  moveNumber Int      @map("move_number")
  playerId   String?  @map("player_id") @db.Uuid
  fromSquare String   @map("from_square") @db.VarChar(5)
  toSquare   String   @map("to_square") @db.VarChar(5)
  promotion  String?  @db.VarChar(5)
  fen        String
  createdAt  DateTime @default(now()) @map("created_at")

  game   Game  @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player User? @relation(fields: [playerId], references: [id], onDelete: SetNull)

  @@map("game_move")
}

model GameSpectator {
  id          String   @id @default(uuid()) @db.Uuid
  gameId      String   @map("game_id") @db.Uuid
  spectatorId String   @map("spectator_id") @db.Uuid
  joinedAt    DateTime @default(now()) @map("joined_at")

  game      Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  spectator User @relation(fields: [spectatorId], references: [id], onDelete: Cascade)

  @@unique([gameId, spectatorId])
  @@map("game_spectator")
}
