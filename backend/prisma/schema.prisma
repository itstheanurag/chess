// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           BigInt    @id @default(autoincrement())
  username     String    @unique @db.VarChar(50)
  email        String    @unique @db.VarChar(100)
  passwordHash String    @map("password_hash")
  rating       Int       @default(1200)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")

  whiteGames   Game[]    @relation("WhitePlayer")
  blackGames   Game[]    @relation("BlackPlayer")
  moves        GameMove[]
  spectating   GameSpectator[]
}

model Game {
  id            BigInt          @id @default(autoincrement())
  whitePlayerId BigInt?         @map("white_player_id")
  blackPlayerId BigInt?         @map("black_player_id")
  status        String          @db.VarChar(20)
  result        String?         @db.VarChar(20)
  type          GameType        @default(PUBLIC)   
  passcode      String?         @db.VarChar(20)   
  isVisible     Boolean         @default(false)   
  fen           String          @db.Text         
  startedAt     DateTime?       @map("started_at")
  endedAt       DateTime?       @map("ended_at")
  createdAt     DateTime        @default(now()) @map("created_at")

  whitePlayer   User?           @relation("WhitePlayer", fields: [whitePlayerId], references: [id], onDelete: SetNull)
  blackPlayer   User?           @relation("BlackPlayer", fields: [blackPlayerId], references: [id], onDelete: SetNull)
  moves         GameMove[]
  spectators    GameSpectator[]
}


enum GameType {
  PUBLIC
  PRIVATE
}

model GameMove {
  id         BigInt   @id @default(autoincrement())
  gameId     BigInt   @map("game_id")
  moveNumber Int      @map("move_number")
  playerId   BigInt?  @map("player_id")
  fromSquare String   @map("from_square") @db.VarChar(5)
  toSquare   String   @map("to_square") @db.VarChar(5)
  promotion  String?  @db.VarChar(5)
  fen        String
  createdAt  DateTime @default(now()) @map("created_at")

  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player     User?    @relation(fields: [playerId], references: [id], onDelete: SetNull)
}

model GameSpectator {
  id           BigInt   @id @default(autoincrement())
  gameId       BigInt   @map("game_id")
  spectatorId  BigInt   @map("spectator_id")
  joinedAt     DateTime @default(now()) @map("joined_at")

  // Relations
  game         Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  spectator    User     @relation(fields: [spectatorId], references: [id], onDelete: Cascade)

  @@unique([gameId, spectatorId])
}
